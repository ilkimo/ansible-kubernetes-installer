---
- hosts: kubernetes_cluster
  become: true
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

- name: Initialize master and worker nodes
  hosts: control_plane
  tasks:
  - name: disable UFW firewall for labs
    become: true
    service:
      name: ufw
      state: stopped
      enabled: false

  - name: Allow IPv4 packets to be routed between interfaces
    become: true
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.ipv4.ip_forward = 1
      owner: root
      group: root
      mode: '0644'

  - name: Apply sysctl parameters without reboot
    command: sysctl --system

  - name: Installation of apt-utils
    become: true
    apt:
      name: apt-transport-https
      state: present
      update_cache: yes


  - name: Installation of Containerd
    become: true
    apt:
      name: containerd
      state: present

  - name: Setting value of SystemdCgroup
    become: true
    shell: |
      mkdir -p /etc/containerd
      containerd config default | sudo tee /etc/containerd/config.toml | grep SystemdCgroup
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

  - name : Starting Containerd service
    service:
      name: containerd
      state: started
      enabled: yes

  - name: Create directory for apt keyrings
    become: true
    ansible.builtin.file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Get Kubernetes GPG key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
      dest: /tmp/kubernetes-release.key

  - name: Convert key to dearmored format
    become: true
    # Ansible 2.12+ ha il modulo community.crypto 
    # (community.crypto.openssl_dhparam, ecc.), ma se non 
    # disponibile, si puÃ² usare il modulo command/shell:
    command: >
      gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      /tmp/kubernetes-release.key
    args:
      creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Add Kubernetes repository
    become: true
    apt_repository:
      repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
      filename: "kubernetes.list"
      state: present

  - name: Update apt cache
    become: true
    apt:
      update_cache: yes

  - name: Install kubelet and kubeadm
    become: true
    apt:
      name: "{{ item }}"
      state: present
    loop:
      - kubeadm
      - kubelet

  - name: install kubectl
    become: true
    apt:
      name: kubectl
      state: present
    #  when: "'masters' in group_names" # TODO

  - name: Enable IPv4 packet forwarding
    ansible.builtin.copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.ipv4.ip_forward = 1
      force: true

  - name: Reload sysctl
    become: true
    command: sysctl --system

  # Blocking packages to the exact version. Kubernetes has to be
  # updated with special attention
  - name: Hold kubeadm, kubectl, and kubelet packages
    become: true
    command: apt-mark hold "{{ item }}"
    loop:
      - kubeadm
      - kubectl
      - kubelet
    changed_when: false

  - name: Initialize Kubernetes control plane
    become: true
    command:
      cmd: kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address={{ kube_apiserver_advertise_address }}
    register: kubeadm_init
    ignore_errors: false  # Fail if this step fails

  - name: Create .kube directory for user
    file:
      path: "{{ ansible_env.HOME }}/.kube"
      state: directory
      mode: '0755' # TODO try reducing permissions, maybe 700

  - name: Copy Kubernetes admin configuration
    become: true
    copy:
      src: /etc/kubernetes/admin.conf
      dest: "{{ ansible_env.HOME }}/.kube/config"
      remote_src: yes
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: '0644'

  - name: Ensure $HOME/.kube directory exists
    file:
      path: "{{ ansible_env.HOME }}/.kube"
      state: directory
      mode: '0755'
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

  - name: Copy Kubernetes admin.conf to $HOME/.kube/config
    become: true
    copy:
      src: /etc/kubernetes/admin.conf
      dest: "{{ ansible_env.HOME }}/.kube/config"
      remote_src: yes

  - name: Change ownership of the Kubernetes config file
    file:
      path: "{{ ansible_env.HOME }}/.kube/config"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'

  - name: Open control plane ports securely
    become: true
    ansible.builtin.iptables:
      chain: INPUT
      protocol: tcp
      destination_port: "{{ item.port }}"
      jump: ACCEPT
      match: conntrack          # or "state"
      ctstate:
        - NEW
        - ESTABLISHED
    with_items:
      - { port: 6443 }      # Kubernetes API server
      - { port: 2379 }      # etcd client API
      - { port: 2380 }      # etcd client API
      - { port: 10250 }     # Kubelet API
      - { port: 10259 }     # kube-scheduler
      - { port: 10257 }     # kube-controller-manager
      # - { port: 8080 }      # Kubernetes API server (insecure/local)

- name: Open ports for worker nodes
  hosts: workers
  tasks:
  - name: Open worker node ports
    become: true
    ansible.builtin.iptables:
      chain: INPUT
      protocol: tcp
      destination_port: "{{ item.port }}"
      jump: ACCEPT
      match: conntrack          # or "state"
      ctstate:
        - NEW
        - ESTABLISHED
    with_items:
      - { port: 10250 }     # Kubelet API
      - { port: 10256 }     # kube-proxy
      - { port: "30000:32767" } # NodePort range

- name: Install Calico CNI
  hosts: control_plane
  tasks:
  - name: Download and apply the Calico manifest
    command: >
      kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml
    args:
      creates: "/etc/kubernetes/manifests/tigera-operator.yaml"
    register: calico_output
    changed_when: calico_output.rc == 0
